package magetask

// NO SPACES IN HERE! USE TABS!
const versionFileTemplate = `package versions

// This code is autogenerated by apolibver. Do not edit manually.

import (
	"encoding/json"
	"fmt"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// Versions of the current project.
var (
	ProjectVersion = "{{.ProjectVersion}}"
	ProjectSha = "{{.ProjectSha}}"
)

// Versions of the various libraries used by the project.
var (
    {{- range $name, $version := .Libs }}
    {{- if and $version (or (hasprefix $name "github.com/aporeto-inc/") (hasprefix $name "go.aporeto.io/")) }}
    {{ varname $name }}Version = "{{ $version }}"
    {{- end}}
    {{- end}}
)

// Fields returns a ready to dump zap.Fields containing all the versions used.
func Fields() []zapcore.Field {

	return []zapcore.Field{
        {{- range $name, $version := .Libs }}
        {{- if and $version (or (hasprefix $name "github.com/aporeto-inc/") (hasprefix $name "go.aporeto.io/")) }}
        zap.String("{{ short $name }}", {{ varname $name }}Version),
        {{- end}}
		{{- end}}
	}
}

// Map returns the version information as a map.
func Map() map[string]interface{} {

	return map[string]interface{}{
		"version": ProjectVersion,
		"sha": ProjectSha[0:7],
		"libs": map[string]string{
            {{- range $name, $version := .Libs }}
            {{- if and $version (or (hasprefix $name "github.com/aporeto-inc/") (hasprefix $name "go.aporeto.io/")) }}
            "{{ short $name }}": {{ varname $name }}Version,
            {{- end}}
			{{- end}}
		},
	}
}

// ToString returns the string version of versions
func ToString(prefix string) string {

	buffer := fmt.Sprintf("%s%32s : %s\n", prefix, "ProjectVersion", ProjectVersion)
	buffer += fmt.Sprintf("%s%32s : %s\n", prefix, "ProjectSha", ProjectSha[0:7])
	buffer += fmt.Sprintf("%s%32s : %s\n", prefix, "Libraries", "")
    {{- range $name, $version := .Libs }}
    {{- if and $version (or (hasprefix $name "github.com/aporeto-inc/") (hasprefix $name "go.aporeto.io/")) }}
    buffer += fmt.Sprintf("%s    %32s : %s\n", prefix, "{{ short $name}}", {{ varname $name}}Version)
    {{- end}}
	{{- end}}
	return buffer
}

// JSON returns the version as a ready to send json data.
func JSON() ([]byte, error) {

	return json.MarshalIndent(Map(), "", "    ")
}
`
